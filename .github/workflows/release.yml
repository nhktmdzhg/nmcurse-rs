name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install ncurses development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev libncursesw5-dev

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check code format
        run: cargo fmt --all -- --check

      - name: Run tests
        run: cargo test --verbose

      - name: Test version command
        run: |
          cargo build --release
          ./target/release/nmcurse --version
          ./target/release/nmcurse -v
          ./target/release/nmcurse --help

  build:
    name: Build Linux binary
    needs: check
    runs-on: ubuntu-20.04  # Use older Ubuntu for better compatibility
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install ncurses development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev libncursesw5-dev

      - name: Build release binary with older ncurses
        run: |
          # Use older Ubuntu base for better compatibility
          cargo build --release

      - name: Test binary
        run: |
          ./target/release/nmcurse --version
          echo "Binary test passed"

      - name: Create artifact directory
        run: mkdir -p artifacts

      - name: Copy binary to artifacts
        run: |
          cp target/release/nmcurse artifacts/nmcurse-linux-amd64
          chmod +x artifacts/nmcurse-linux-amd64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nmcurse-linux-amd64
          path: artifacts/nmcurse-linux-amd64

  create-release:
    name: Create GitHub Release
    needs: [check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create release notes
        run: |
          echo "# Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          echo "- Build artifacts for Linux x86_64" >> release_notes.md
          echo "- Version ${{ steps.version.outputs.version }} of nmcurse" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "Download the binary for Linux:" >> release_notes.md
          echo "- \`nmcurse-linux-amd64\` - For Linux x86_64 systems" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Requirements" >> release_notes.md
          echo "The binary requires ncurses library. Install it with:" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Ubuntu/Debian:" >> release_notes.md
          echo "sudo apt-get install libncurses5 libncurses6" >> release_notes.md
          echo "" >> release_notes.md
          echo "# CentOS/RHEL/Fedora:" >> release_notes.md
          echo "sudo dnf install ncurses-libs" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Arch Linux:" >> release_notes.md
          echo "sudo pacman -S ncurses" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "If you get 'libncurses.so.6 not found', try:" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "sudo ln -sf /usr/lib/libncursesw.so.6 /usr/lib/libncurses.so.6" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "Make the binary executable: \`chmod +x nmcurse-linux-amd64\`" >> release_notes.md

      - name: Create or update tag (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            nmcurse-linux-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
