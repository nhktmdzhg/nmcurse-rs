name: Manual Version Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_message:
        description: 'Release message (optional)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  version-bump-and-release:
    name: Bump Version and Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install ncurses development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev libncursesw5-dev

      - name: Get current version
        id: current_version
        run: |
          current_version=$(grep "^version = " Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"

      - name: Calculate new version
        id: new_version
        run: |
          current="${{ steps.current_version.outputs.current }}"
          bump_type="${{ github.event.inputs.bump_type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$current"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          
          case $bump_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Update version in Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.new_version.outputs.version }}\"/" Cargo.toml
          echo "Updated Cargo.toml to version ${{ steps.new_version.outputs.version }}"

      - name: Update Cargo.lock
        run: cargo check

      - name: Test build
        run: cargo build --release

      - name: Test version command
        run: |
          version_output=$(./target/release/nmcurse --version)
          expected_output="nmcurse v${{ steps.new_version.outputs.version }}"
          
          if [[ "$version_output" != "$expected_output" ]]; then
            echo "Version test failed. Expected: '$expected_output', Got: '$version_output'"
            exit 1
          fi
          
          echo "Version test passed: $version_output"

      - name: Run tests
        run: cargo test

      - name: Commit version bump
        run: |
          git add Cargo.toml Cargo.lock
          
          if [ -n "${{ github.event.inputs.release_message }}" ]; then
            commit_message="chore: bump version to v${{ steps.new_version.outputs.version }} - ${{ github.event.inputs.release_message }}"
          else
            commit_message="chore: bump version to v${{ steps.new_version.outputs.version }}"
          fi
          
          git commit -m "$commit_message"

      - name: Create and push tag
        run: |
          if [ -n "${{ github.event.inputs.release_message }}" ]; then
            tag_message="Release v${{ steps.new_version.outputs.version }} - ${{ github.event.inputs.release_message }}"
          else
            tag_message="Release v${{ steps.new_version.outputs.version }}"
          fi
          
          git tag -a "${{ steps.new_version.outputs.tag }}" -m "$tag_message"
          git push origin main
          git push origin "${{ steps.new_version.outputs.tag }}"

      - name: Output success
        run: |
          echo "âœ… Successfully created release ${{ steps.new_version.outputs.tag }}"
          echo "The release workflow will now be triggered automatically to build and publish the release."
